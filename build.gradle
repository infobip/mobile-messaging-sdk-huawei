buildscript {
    ext {
        artifactoryUsername = project.hasProperty('artifactoryUsername') ? project['artifactoryUsername'] : System.getenv('ARTIFACTORY_USERNAME')
        artifactoryPassword = project.hasProperty('artifactoryPassword') ? project['artifactoryPassword'] : System.getenv('ARTIFACTORY_PASSWORD')
    }

    repositories {
        maven {
            url 'https://oss.jfrog.org/artifactory/plugins-release'
            credentials {
                username = "${artifactoryUsername}"
                password = "${artifactoryPassword}"
            }
        }
        google()
        jcenter()
        // huawei maven
        maven { url 'http://developer.huawei.com/repo/' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.2'
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.4.7'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
    }
}

plugins {
    id 'net.researchgate.release' version '2.8.1'
    id 'com.jfrog.artifactory' version '4.4.7'
    id 'com.jfrog.bintray' version '1.7.3'
}

ext {
    mm_minSdkVersion = 17
    mm_compileSdkVersion = 28
    mm_targetSdkVersion = 28
    mm_buildToolsVersion = "28.0.3"
    mm_supportLibrariesVersion = "28.0.0"
    mm_apiVersion = "3.0.4"
}

allprojects {
    repositories {
        google()
        jcenter()
        // huawei maven
        maven { url 'http://developer.huawei.com/repo/' }
    }
}

subprojects {
    apply plugin: "maven"
    apply plugin: "com.jfrog.artifactory"

    def repo = version.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
    def artifactoryUrl = System.getenv('ARTIFACTORY_URL') ? System.getenv('ARTIFACTORY_URL') : "https://oss.jfrog.org/artifactory"

    task checkProperties {
        doLast {
            if (!"${artifactoryUsername}") {
                throw new RuntimeException("Couldn't find artifactoryUsername property. Did you forget to specify it in ~/.gradle/gradle.properties or env.ARTIFACTORY_USERNAME?")
            } else if (!"${artifactoryPassword}") {
                throw new RuntimeException("Couldn't find artifactoryPassword property. Did you forget to specify it in ~/.gradle/gradle.properties or env.ARTIFACTORY_PASSWORD?")
            }
        }
    }

    artifactoryPublish.dependsOn(checkProperties)

    artifactory {
        contextUrl = artifactoryUrl
        publish {
            repository {
                repoKey = "${repo}"
                username = "${artifactoryUsername}"
                password = "${artifactoryPassword}"
                maven = true
            }
            defaults {
                publishConfigs('archives')
            }
        }
        resolve {
            repository {
                repoKey = 'libs-release'
                username = "${artifactoryUsername}"
                password = "${artifactoryPassword}"
                maven = true
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task updateVersionInReadme {
    doLast {
        def readmeFile = new File('README.md')
        def text = readmeFile.text
        readmeFile.withWriter { w ->
            w << text.replaceFirst('infobip-mobile-messaging-huawei-sdk:\\d+\\.\\d+\\.\\S+@aar', "infobip-mobile-messaging-huawei-sdk:$version@aar")
        }
    }
}

afterReleaseBuild.dependsOn updateVersionInReadme

release {
    buildTasks = ['clean', 'build', 'bintrayUpload']
    git {
        requireBranch = ''
        pushToRemote = 'origin'
    }
}